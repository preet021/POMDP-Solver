#!/usr/bin/perl -w

# DESCRIPTION: generates the RockSample POMDP

# Copyright (c) 2003-2005, Trey Smith.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

$prob_name = "RockSample_5_5";
$prob_file = "$prob_name.pomdp";

$X_SIZE = 5;
$Y_SIZE = $X_SIZE;
@INITIAL_POS = (0,2);

# can use the following to generate points
#perl -e 'for (1..6) { $x = int(rand(5)); $y = int(rand(5)); print "[$x, $y],\n"; }'

@ROCK_POSITIONS = ([2, 4],
		   [0, 4],
		   [3, 3],
		   [2, 2],
		   [4, 1],
		   #[0, 1]
		   );
$NUM_ROCKS = $#ROCK_POSITIONS+1;
$TERMINAL_REWARD = 10;
$ILLEGAL_PENALTY = -100;
$SAMPLE_GOOD_REWARD = 10;
$SAMPLE_BAD_PENALTY = -10;

$SENSOR_HALF_EFF_DISTANCE = 4;

$DEFAULT_OBSERVATION = [[1,'ogood']];
$ILLEGAL_RESULT = [$ILLEGAL_PENALTY, [[1,'st']], $DEFAULT_OBSERVATION];

&main();

######################################################################

sub state_to_string {
    my $state = shift;
    # special case for terminal state
    if ($state eq 'st') { return 'st'; }
    my ($x, $y, $r) = @{$state};
    return "s$x$y" . sprintf("%0${NUM_ROCKS}b", $r);
}

sub sparse_to_dense {
    my $sparse = shift;
    my $state_list = shift;

    my %smap = ();
    for my $i (0 .. $#{$state_list}) {
	my $s = $state_list->[$i];
        my $ss = &state_to_string($s);
        $smap{$ss} = $i;
	#print STDOUT "$ss => $i\n";
    }
    my @dense = ();
    for (0..$#{$state_list}) { push @dense, 0; }
    for (@{$sparse}) {
	my ($prob, $s) = @{$_};
	my $ss = &state_to_string($s);
	$dense[$smap{$ss}] = $prob;
    }
    return @dense;
}

sub gen_state_list {
    my @state_list = ();
    for my $x (0..($X_SIZE-1)) {
	for my $y (0..($Y_SIZE-1)) {
	    for my $r (0..(2**$NUM_ROCKS-1)) {
		push @state_list, [$x,$y,$r];
	    }
	}
    }
    # add the terminal state
    push @state_list, 'st';

    return @state_list;
}

sub gen_action_list {
    my @action_list = ('amn','ame','ams','amw');
    for my $rock_num (0..($NUM_ROCKS-1)) {
	push @action_list, "ac$rock_num";
    }
    push @action_list, 'as';
    return @action_list;
}

sub gen_observation_list {
    return ('ogood','obad');
}

sub gen_start_state {
    # pick an arbitrary initial position
    my $x = $INITIAL_POS[0];
    my $y = $INITIAL_POS[1];

    # uniform probability over all possible rock good/bad values
    my $unif_prob = 1 / (2**$NUM_ROCKS);
    my @sparse = ();
    for my $r (0 .. (2**$NUM_ROCKS-1)) {
	push @sparse, [$unif_prob, [$x,$y,$r]];
    }

    return \@sparse;
}

######################################################################

# each of these functions returns R(s,a), a sparse representation of
# T(s,a,.), and a sparse representation of O(s,a,.)

sub action_result {
    my $s = shift;
    my $a = shift;

    # special case for terminal state
    if ($s eq 'st') {
	return [0, [[1,'st']], $DEFAULT_OBSERVATION];
    }
    
    my $action_type = substr($a,1,1);
    if ($action_type eq 'm') {
	return &move($s,$a);
    } elsif ($action_type eq 'c') {
	return &check($s,$a);
    } elsif ($action_type eq 's') {
	return &sample($s,$a);
    }
}

sub sample {
    my $s = shift;
    my $a = shift;

    my ($x,$y,$r) = @{$s};
    my $rock_num = &which_rock($x,$y);

    # trying to sample when not at a rock is illegal
    if ($rock_num == -1) {
	return $ILLEGAL_RESULT;
    }

    my $mask = (1 << ($NUM_ROCKS-$rock_num-1));
    my $rock_was_good = ($r & $mask) != 0;
    my $reward = $rock_was_good ? $SAMPLE_GOOD_REWARD : $SAMPLE_BAD_PENALTY;

    # mark the rock sampled as being bad
    my $rp = $r & ~$mask;
    my $sp = [$x,$y,$rp];

    return [$reward, [[1,$sp]], $DEFAULT_OBSERVATION];
}

sub move {
    my $s = shift;
    my $a = shift;

    my ($x,$y,$r) = @{$s};
    my $direction = substr($a,2,1);

    my %dir_map = ('n' => [0,1], 'e' => [1,0], 's' => [0,-1], 'w' => [-1,0]);
    my ($dx, $dy) = @{$dir_map{$direction}};
    my $xp = $x + $dx;
    my $yp = $y + $dy;

    # special case: moving off the right-hand edge puts us in the terminal state
    # with a reward
    if ($xp >= $X_SIZE) {
	return [$TERMINAL_REWARD, [[1,'st']], $DEFAULT_OBSERVATION];
    }

    # otherwise, trying to move across a boundary is illegal
    if ($xp >= $X_SIZE or $xp < 0 or $yp >= $Y_SIZE or $yp < 0) {
	return $ILLEGAL_RESULT;
    }

    # and here is the usual case, that we moved
    my $sp = [$xp,$yp,$r];
    return [0, [[1,$sp]], $DEFAULT_OBSERVATION];
}

sub check {
    my $s = shift;
    my $a = shift;

    my ($x,$y,$r) = @{$s};
    my $rock_num = substr($a,2,1);

    # sensor efficiency depends on distance from the rock
    my ($rx,$ry) = @{$ROCK_POSITIONS[$rock_num]};
    my $d = sqrt(($x - $rx)**2 + ($y - $ry)**2);
    my $eff = exp(-$d*log(2)/$SENSOR_HALF_EFF_DISTANCE);
    
    # at efficiency 1, the sensor always tells you the right answer;
    # at efficiency 0, it tells you 50/50.  in between, a linear combination.
    my $rock_is_good = ($r & (1 << ($NUM_ROCKS-$rock_num-1))) != 0;
    my $chance_positive = $eff * $rock_is_good + (1 - $eff) * 0.5;
    my $chance_negative = 1 - $chance_positive;

    return [0, [[1,$s]], [[$chance_positive,'ogood'],[$chance_negative,'obad']]];
}

######################################################################

sub which_rock {
    my $x = shift;
    my $y = shift;

    for $i (0 .. $#ROCK_POSITIONS) {
	my ($xp,$yp) = @{$ROCK_POSITIONS[$i]};
	if ($xp == $x and $yp == $y) {
	    return $i;
	}
    }
    return -1;
}

######################################################################

sub main {
    open(OUT, ">$prob_file") or die "couldn't open $prob_file for writing: $!\n";
    select OUT;
    
    print << "EOF"; #####################################################
# state naming convention: s <x> <y> <rock_0> <rock_1> .. <rock_{n-1}>
# action naming convention:
#   amn, ame, ams, amw: move in the cardinal directions
#   ac0, ac1 .. ac{n-1}: do the "check" action on the indicated rock
#   as: sample the rock in the robot's square
# observation naming convention:
#   ogood, obad: the check sensor is indicating a "good" or "bad" reading
#                for the rock.  actions other than check always return ogood.
EOF
######################################################################
    print "# initial position is: ($INITIAL_POS[0], $INITIAL_POS[1])\n";

    print "# rock positions are: ";
    for (@ROCK_POSITIONS) {
	print "($_->[0],$_->[1]) ";
    }
    print "\n\n";

    print "discount: 0.95\n";
    print "values: reward\n";
    
    # print list of actions
    my @action_list = &gen_action_list();
    print "actions: ", join(" ", @action_list), "\n";

    # print list of observations
    my @observation_list = &gen_observation_list();
    print "observations: ", join(" ", @observation_list), "\n\n";

    # print list of states
    my @state_list = &gen_state_list();
    print "states: ", join(" ", map { &state_to_string($_); } @state_list), "\n\n";

    my @start_state = &sparse_to_dense(&gen_start_state(), \@state_list);
    print "start: ", join(" ", @start_state), "\n\n";

    # i don't think these are necessary; they may slow down the reading process
    #   considerably
    #print "R: * : * : * : * 0.0\n";
    #print "T: * : * : * 0.0\n";
    #print "O: * : * : * 0.0\n";

    print "# E: st\n";
    print "\n";

    for my $s (@state_list) {
	my $ss = &state_to_string($s);
	for my $a (@action_list) {
	    my ($R,$T,$O) = @{&action_result($s,$a)};
	    printf("R: %-3s : %-10s : * : * %f\n",
		   $a, $ss, $R);
	    for (@{$T}) {
		my ($prob, $sp) = @{$_};
		printf("T: %-3s : %-10s : %-10s %f\n",
		       $a, $ss, &state_to_string($sp), $prob);
	    }
	    for (@{$O}) {
		my ($prob, $o) = @{$_};
		printf("O: %-3s : %-10s : %-10s %f\n",
		       $a, $ss, $o, $prob);
	    }
	    print "\n";
	}
    }
    
    close(OUT);
}

